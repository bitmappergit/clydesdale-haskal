#!/bin/csh
#
# savesys -- build a saved executable in bin/new-cmu-haskell.core
#
#
cd $Y2
setenv PRELUDEBIN $Y2/progs/prelude/cmu
if !(-e $PRELUDEBIN/Prelude.sparcf) then
  echo "Build the prelude first, stupid..."
  exit
  endif
$CMUCL <<EOF
;;; Load the Haskell system.
(make-package "MUMBLE-IMPLEMENTATION" :use '("LISP"))
(load "cl-support/cl-init")
;;; Set various internal switches to appropriate values for running
;;; Haskell code.
(setf ext:*bytes-consed-between-gcs* 4000000)
(proclaim '(optimize (speed 3) (safety 0) (debug 0) (ext:inhibit-warnings 3)))
(setf *load-verbose* nil)
(setf *compile-verbose* nil)
(in-package :mumble-user)
(gc-messages '#f)
(setf *printers* '(compiling loading prompt))
(setf *compile-interface* '#f)
;;; Load the prelude.
(compile/load *prelude-unit-filename*)
;;; Set up the saved system.
(setf *modules-loaded* '())
(define (haskell-toplevel)
  (use-vanilla-interface)
  (load-init-files)
  (let* ((argv  (getenv "HASKELLARGS"))
         (args  (if argv (parse-command-args-top argv) '())))
    (if (null? args)
	(do () ('#f)
    	  (lisp:with-simple-restart (restart-haskell "Restart Haskell.")
            (heval)))
        (lisp:with-simple-restart (restart-haskell "Exit Haskell.")
          (hrun (car args) (cdr args))))))
(define (restart-haskell)
  (lisp:invoke-restart 'restart-haskell))
(define (haskell-debugger-hook c f)
  (declare (ignore f))
  (if *haskell-debug-in-lisp*
      (begin
        (when *haskell-enter-debugger-hook*
          (funcall *haskell-enter-debugger-hook*))
        (lisp:unwind-protect (lisp:invoke-debugger c)
          (when *haskell-exit-debugger-hook*
            (funcall *haskell-exit-debugger-hook*))))
      (begin
        (format '#t "Lisp error:~%~a~%" c)
        (haskell-backtrace)
        (when *haskell-compilation-error-hook*
          (funcall *haskell-compilation-error-hook*))
        (format '#t "Restarting Haskell...~%")
        (restart-haskell))))
(setf lisp:*debugger-hook* (function haskell-debugger-hook))
(ext:save-lisp "bin/new-cmu-haskell.core"
  :purify '#t
  :root-structures '()
  :init-function 'haskell-toplevel
  :load-init-file '#f
  :site-init '#f
  :print-herald '#f
  )
(ext:quit)
EOF
