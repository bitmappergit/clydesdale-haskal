#!/bin/csh
#
# savesys -- build a saved executable in bin/new-lucid-haskell
#
#
cd $Y2
setenv PRELUDEBIN $Y2/progs/prelude/lucid
if !(-e $PRELUDEBIN/Prelude.sbin) then
  echo "Build the prelude first, stupid..."
  exit
  endif
$LUCID <<EOF
;;; Load the Haskell system.
(make-package "MUMBLE-IMPLEMENTATION" :use '("LISP"))
(lcl:change-memory-management :expand 512 :growth-limit 2048)
(setf lcl:*record-source-files* nil)
(load "cl-support/cl-init")
;;; Set various internal switches to appropriate values for running
;;; Haskell code.
(proclaim '(optimize (speed 3) (safety 0) (compilation-speed 0)))
(lcl:compiler-options :file-messages nil)
(setf lcl:*redefinition-action* nil)
(setf *load-verbose* nil)
(in-package :mumble-user)
(setf *printers* '(compiling loading prompt))
(setf *compile-interface* '#t)
(setf *interface-code-quality* 1)
(setf *code-chunk-size* 200)
;;; Load the prelude.
(compile/load *prelude-unit-filename*)
;;; Set up the saved system.
(setf *modules-loaded* '())
(define (haskell-toplevel)
  (use-vanilla-interface)
  (load-init-files)
  (let ((args  (get-command-line-args)))
    (if (null? args)
        (do () ('#f)
          (lcl:with-simple-restart (restart-haskell "Restart Haskell.")
            (heval)))
        (lcl:with-simple-restart (restart-haskell "Exit Haskell.")
          (hrun (car args) (cdr args))))))
(define (get-command-line-args)
  (let ((result  '()))
    (lisp:do*
         ((i 1 (1+ i))
          (arg (lcl:command-line-argument i) (lcl:command-line-argument i)))
         ((not arg) (nreverse result))
         (push arg result))))
(define (restart-haskell)
  (lcl:invoke-restart 'restart-haskell))
(define (haskell-debugger-hook c f)
  (declare (ignore f))
  (if *haskell-debug-in-lisp*
      (begin
        (when *haskell-enter-debugger-hook*
          (funcall *haskell-enter-debugger-hook*))
        (lisp:unwind-protect (lcl:invoke-debugger c)
          (when *haskell-exit-debugger-hook*
            (funcall *haskell-exit-debugger-hook*))))
      (begin
        (format '#t "Lisp error:~%~a~%" c)
        (haskell-backtrace)
        (when *haskell-compilation-error-hook*
          (funcall *haskell-compilation-error-hook*))
        (format '#t "Restarting Haskell...~%")
        (restart-haskell))))
(setf lcl:*debugger-hook* (function haskell-debugger-hook))
(lcl:gc)
(lcl:disksave "bin/new-lucid-haskell"
  :reserved-free-segments 64 :dynamic-free-segments 25
  :restart-function 'haskell-toplevel :full-gc '#t)
(lcl:quit)
EOF
